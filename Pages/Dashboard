import React, { useState, useEffect } from "react";
import { Workout, BodyMeasurement, PersonalRecord } from "@/entities/all";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { 
  Activity, 
  TrendingUp, 
  Calendar, 
  Trophy, 
  Plus,
  Flame,
  Clock,
  Target,
  Zap
} from "lucide-react";
import { format, subDays, startOfWeek, endOfWeek } from "date-fns";

import StatsOverview from "../components/dashboard/StatsOverview";
import RecentWorkouts from "../components/dashboard/RecentWorkouts";
import WeeklyProgress from "../components/dashboard/WeeklyProgress";
import RecentPRs from "../components/dashboard/RecentPRs";

export default function Dashboard() {
  const [workouts, setWorkouts] = useState([]);
  const [measurements, setMeasurements] = useState([]);
  const [personalRecords, setPersonalRecords] = useState([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    loadDashboardData();
  }, []);

  const loadDashboardData = async () => {
    setIsLoading(true);
    try {
      const [workoutData, measurementData, prData] = await Promise.all([
        Workout.list('-date', 10),
        BodyMeasurement.list('-date', 5),
        PersonalRecord.list('-date_achieved', 5)
      ]);
      
      setWorkouts(workoutData);
      setMeasurements(measurementData);
      setPersonalRecords(prData);
    } catch (error) {
      console.error('Error loading dashboard data:', error);
    }
    setIsLoading(false);
  };

  const getWeeklyStats = () => {
    const weekStart = startOfWeek(new Date());
    const weekEnd = endOfWeek(new Date());
    
    const weekWorkouts = workouts.filter(w => {
      const workoutDate = new Date(w.date);
      return workoutDate >= weekStart && workoutDate <= weekEnd;
    });
    
    const totalDuration = weekWorkouts.reduce((sum, w) => sum + (w.duration_minutes || 0), 0);
    const totalCalories = weekWorkouts.reduce((sum, w) => sum + (w.calories_burned || 0), 0);
    
    return {
      workoutsThisWeek: weekWorkouts.length,
      totalDuration,
      totalCalories,
      avgDifficulty: weekWorkouts.length > 0 
        ? weekWorkouts.reduce((sum, w) => sum + (w.difficulty_rating || 0), 0) / weekWorkouts.length 
        : 0
    };
  };

  const weeklyStats = getWeeklyStats();

  return (
    <div className="p-6 lg:p-8 space-y-8">
      {/* Header */}
      <div className="flex flex-col lg:flex-row justify-between items-start lg:items-center gap-6">
        <div>
          <h1 className="text-4xl font-bold text-slate-900 mb-2">
            Welcome Back
          </h1>
          <p className="text-slate-600 text-lg">
            Ready to crush your fitness goals today?
          </p>
        </div>
        <Link to={createPageUrl("LogWorkout")}>
          <Button 
            size="lg"
            className="fitness-gradient hover:opacity-90 transition-all duration-300 shadow-lg hover:shadow-xl px-8 py-3"
          >
            <Plus className="w-5 h-5 mr-2" />
            Log New Workout
          </Button>
        </Link>
      </div>

      {/* Stats Overview */}
      <StatsOverview 
        weeklyStats={weeklyStats}
        totalWorkouts={workouts.length}
        latestWeight={measurements[0]?.weight}
        personalRecords={personalRecords.length}
        isLoading={isLoading}
      />

      {/* Main Content Grid */}
      <div className="grid lg:grid-cols-3 gap-8">
        {/* Left Column - Recent Workouts */}
        <div className="lg:col-span-2 space-y-8">
          <RecentWorkouts 
            workouts={workouts.slice(0, 5)}
            isLoading={isLoading}
          />
          
          <WeeklyProgress 
            workouts={workouts}
            measurements={measurements}
          />
        </div>

        {/* Right Column - PRs and Quick Stats */}
        <div className="space-y-8">
          <RecentPRs 
            personalRecords={personalRecords}
            isLoading={isLoading}
          />
          
          {/* Quick Actions */}
          <Card className="workout-card border-0">
            <CardHeader className="pb-4">
              <CardTitle className="flex items-center gap-2 text-slate-900">
                <Zap className="w-5 h-5 text-blue-600" />
                Quick Actions
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <Link to={createPageUrl("Progress")} className="block">
                <Button 
                  variant="outline" 
                  className="w-full justify-start hover:bg-slate-50 transition-colors"
                >
                  <TrendingUp className="w-4 h-4 mr-2" />
                  View Progress Charts
                </Button>
              </Link>
              <Link to={createPageUrl("Profile")} className="block">
                <Button 
                  variant="outline" 
                  className="w-full justify-start hover:bg-slate-50 transition-colors"
                >
                  <Target className="w-4 h-4 mr-2" />
                  Update Measurements
                </Button>
              </Link>
              <Link to={createPageUrl("Programs")} className="block">
                <Button 
                  variant="outline" 
                  className="w-full justify-start hover:bg-slate-50 transition-colors"
                >
                  <Calendar className="w-4 h-4 mr-2" />
                  Plan Workouts
                </Button>
              </Link>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}