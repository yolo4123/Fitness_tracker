import React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { 
  Plus, 
  Save, 
  Trash2, 
  Timer,
  Flame,
  Zap,
  Dumbbell
} from "lucide-react";

import ExerciseRow from "./ExerciseRow";

export default function WorkoutForm({ 
  workout, 
  onWorkoutChange, 
  onSave, 
  onShowExerciseLibrary,
  isSaving 
}) {
  const updateWorkout = (field, value) => {
    onWorkoutChange(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const updateExercise = (exerciseIndex, updatedExercise) => {
    const newExercises = [...workout.exercises];
    newExercises[exerciseIndex] = updatedExercise;
    updateWorkout('exercises', newExercises);
  };

  const removeExercise = (exerciseIndex) => {
    const newExercises = workout.exercises.filter((_, index) => index !== exerciseIndex);
    updateWorkout('exercises', newExercises);
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onSave(workout);
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {/* Basic Info */}
      <Card className="workout-card border-0">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-slate-900">
            <Dumbbell className="w-5 h-5 text-blue-600" />
            Workout Details
          </CardTitle>
        </CardHeader>
        <CardContent className="grid md:grid-cols-2 gap-4">
          <div className="space-y-2">
            <Label htmlFor="name" className="text-slate-700 font-medium">
              Workout Name
            </Label>
            <Input
              id="name"
              value={workout.name}
              onChange={(e) => updateWorkout('name', e.target.value)}
              placeholder="e.g. Push Day, Leg Day, Cardio"
              className="border-slate-200 focus:border-blue-500 focus:ring-blue-500"
              required
            />
          </div>
          
          <div className="space-y-2">
            <Label htmlFor="date" className="text-slate-700 font-medium">
              Date
            </Label>
            <Input
              id="date"
              type="date"
              value={workout.date}
              onChange={(e) => updateWorkout('date', e.target.value)}
              className="border-slate-200 focus:border-blue-500 focus:ring-blue-500"
              required
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="duration" className="text-slate-700 font-medium flex items-center gap-1">
              <Timer className="w-4 h-4" />
              Duration (minutes)
            </Label>
            <Input
              id="duration"
              type="number"
              value={workout.duration_minutes}
              onChange={(e) => updateWorkout('duration_minutes', parseInt(e.target.value) || 0)}
              placeholder="60"
              className="border-slate-200 focus:border-blue-500 focus:ring-blue-500"
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="calories" className="text-slate-700 font-medium flex items-center gap-1">
              <Flame className="w-4 h-4" />
              Calories Burned
            </Label>
            <Input
              id="calories"
              type="number"
              value={workout.calories_burned}
              onChange={(e) => updateWorkout('calories_burned', parseInt(e.target.value) || 0)}
              placeholder="300"
              className="border-slate-200 focus:border-blue-500 focus:ring-blue-500"
            />
          </div>

          <div className="md:col-span-2 space-y-2">
            <Label htmlFor="difficulty" className="text-slate-700 font-medium flex items-center gap-1">
              <Zap className="w-4 h-4" />
              Difficulty Rating (1-10)
            </Label>
            <div className="flex items-center gap-4">
              <Input
                id="difficulty"
                type="range"
                min="1"
                max="10"
                value={workout.difficulty_rating}
                onChange={(e) => updateWorkout('difficulty_rating', parseInt(e.target.value))}
                className="flex-1"
              />
              <Badge variant="outline" className="min-w-[60px] justify-center">
                {workout.difficulty_rating}/10
              </Badge>
            </div>
          </div>

          <div className="md:col-span-2 space-y-2">
            <Label htmlFor="notes" className="text-slate-700 font-medium">
              Notes
            </Label>
            <Textarea
              id="notes"
              value={workout.notes}
              onChange={(e) => updateWorkout('notes', e.target.value)}
              placeholder="How did you feel? Any observations?"
              className="border-slate-200 focus:border-blue-500 focus:ring-blue-500 min-h-[80px]"
            />
          </div>
        </CardContent>
      </Card>

      {/* Exercises */}
      <Card className="workout-card border-0">
        <CardHeader className="flex flex-row items-center justify-between">
          <CardTitle className="text-slate-900">
            Exercises ({workout.exercises.length})
          </CardTitle>
          <Button
            type="button"
            onClick={onShowExerciseLibrary}
            className="fitness-gradient gap-2"
          >
            <Plus className="w-4 h-4" />
            Add Exercise
          </Button>
        </CardHeader>
        <CardContent className="space-y-4">
          {workout.exercises.length === 0 ? (
            <div className="text-center py-8 text-slate-500">
              <Dumbbell className="w-12 h-12 mx-auto mb-3 text-slate-300" />
              <p className="font-medium">No exercises added yet</p>
              <p className="text-sm">Click "Add Exercise" to get started</p>
            </div>
          ) : (
            workout.exercises.map((exercise, index) => (
              <ExerciseRow
                key={index}
                exercise={exercise}
                onUpdate={(updatedExercise) => updateExercise(index, updatedExercise)}
                onRemove={() => removeExercise(index)}
              />
            ))
          )}
        </CardContent>
      </Card>

      {/* Submit Button */}
      <div className="flex justify-end gap-3 pt-4">
        <Button
          type="submit"
          disabled={!workout.name || isSaving}
          className="fitness-gradient px-8 py-3 gap-2"
          size="lg"
        >
          <Save className="w-4 h-4" />
          {isSaving ? "Saving..." : "Save Workout"}
        </Button>
      </div>
    </form>
  );
}