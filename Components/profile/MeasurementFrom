import React, { useState } from "react";
import { BodyMeasurement } from "@/entities/BodyMeasurement";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Save, TrendingUp } from "lucide-react";

export default function MeasurementForm({ latestMeasurement, onSave }) {
  const [formData, setFormData] = useState({
    date: new Date().toISOString().split('T')[0],
    weight: latestMeasurement?.weight || "",
    body_fat_percentage: latestMeasurement?.body_fat_percentage || "",
    muscle_mass: latestMeasurement?.muscle_mass || "",
    measurements: {
      chest: latestMeasurement?.measurements?.chest || "",
      waist: latestMeasurement?.measurements?.waist || "",
      hips: latestMeasurement?.measurements?.hips || "",
      bicep: latestMeasurement?.measurements?.bicep || "",
      thigh: latestMeasurement?.measurements?.thigh || ""
    },
    notes: ""
  });
  const [isSaving, setIsSaving] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSaving(true);
    try {
      const dataToSave = {
        ...formData,
        measurements: Object.fromEntries(
          Object.entries(formData.measurements).filter(([_, value]) => value !== "")
        )
      };
      
      await BodyMeasurement.create(dataToSave);
      onSave();
      
      // Reset form
      setFormData(prev => ({
        ...prev,
        date: new Date().toISOString().split('T')[0],
        notes: ""
      }));
    } catch (error) {
      console.error("Error saving measurement:", error);
    }
    setIsSaving(false);
  };

  const updateFormData = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const updateMeasurement = (part, value) => {
    setFormData(prev => ({
      ...prev,
      measurements: {
        ...prev.measurements,
        [part]: value
      }
    }));
  };

  return (
    <Card className="workout-card border-0">
      <CardHeader>
        <CardTitle className="flex items-center gap-2 text-slate-900">
          <TrendingUp className="w-5 h-5 text-green-600" />
          Record New Measurement
        </CardTitle>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Basic Measurements */}
          <div className="grid md:grid-cols-3 gap-4">
            <div className="space-y-2">
              <Label htmlFor="date" className="text-slate-700 font-medium">
                Date
              </Label>
              <Input
                id="date"
                type="date"
                value={formData.date}
                onChange={(e) => updateFormData('date', e.target.value)}
                className="border-slate-200 focus:border-blue-500"
                required
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="weight" className="text-slate-700 font-medium">
                Weight (kg)
              </Label>
              <Input
                id="weight"
                type="number"
                step="0.1"
                min="30"
                max="300"
                value={formData.weight}
                onChange={(e) => updateFormData('weight', parseFloat(e.target.value) || "")}
                className="border-slate-200 focus:border-blue-500"
                placeholder="70.5"
                required
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="body_fat" className="text-slate-700 font-medium">
                Body Fat (%)
              </Label>
              <Input
                id="body_fat"
                type="number"
                step="0.1"
                min="3"
                max="50"
                value={formData.body_fat_percentage}
                onChange={(e) => updateFormData('body_fat_percentage', parseFloat(e.target.value) || "")}
                className="border-slate-200 focus:border-blue-500"
                placeholder="15.0"
              />
            </div>
          </div>

          <div className="grid md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="muscle_mass" className="text-slate-700 font-medium">
                Muscle Mass (kg)
              </Label>
              <Input
                id="muscle_mass"
                type="number"
                step="0.1"
                min="10"
                max="100"
                value={formData.muscle_mass}
                onChange={(e) => updateFormData('muscle_mass', parseFloat(e.target.value) || "")}
                className="border-slate-200 focus:border-blue-500"
                placeholder="35.0"
              />
            </div>
          </div>

          {/* Body Measurements */}
          <div>
            <h3 className="font-semibold text-slate-900 mb-4">Body Measurements (cm)</h3>
            <div className="grid md:grid-cols-3 lg:grid-cols-5 gap-4">
              {Object.entries(formData.measurements).map(([part, value]) => (
                <div key={part} className="space-y-2">
                  <Label className="text-slate-700 font-medium capitalize">
                    {part}
                  </Label>
                  <Input
                    type="number"
                    step="0.1"
                    min="10"
                    max="200"
                    value={value}
                    onChange={(e) => updateMeasurement(part, parseFloat(e.target.value) || "")}
                    className="border-slate-200 focus:border-blue-500"
                    placeholder="0.0"
                  />
                </div>
              ))}
            </div>
          </div>

          {/* Notes */}
          <div className="space-y-2">
            <Label htmlFor="notes" className="text-slate-700 font-medium">
              Notes (optional)
            </Label>
            <Textarea
              id="notes"
              value={formData.notes}
              onChange={(e) => updateFormData('notes', e.target.value)}
              className="border-slate-200 focus:border-blue-500"
              placeholder="Any observations about your progress..."
            />
          </div>

          {/* Submit Button */}
          <div className="flex justify-end pt-4">
            <Button 
              type="submit" 
              disabled={isSaving || !formData.weight}
              className="fitness-gradient px-6 gap-2"
            >
              <Save className="w-4 h-4" />
              {isSaving ? "Saving..." : "Save Measurement"}
            </Button>
          </div>
        </form>
      </CardContent>
    </Card>
  );
}