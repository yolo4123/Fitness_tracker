import React, { useState } from "react";
import { User } from "@/entities/User";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Save, Target } from "lucide-react";

export default function GoalsSettings({ user, onUpdate }) {
  const [formData, setFormData] = useState({
    target_weight: user?.target_weight || "",
    weekly_workout_goal: user?.weekly_workout_goal || "",
    target_body_fat: user?.target_body_fat || "",
    strength_goals: user?.strength_goals || "",
    fitness_goals_notes: user?.fitness_goals_notes || ""
  });
  const [isSaving, setIsSaving] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSaving(true);
    try {
      await User.updateMyUserData(formData);
      const updatedUser = await User.me();
      onUpdate(updatedUser);
    } catch (error) {
      console.error("Error updating goals:", error);
    }
    setIsSaving(false);
  };

  const updateFormData = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  return (
    <Card className="workout-card border-0">
      <CardHeader>
        <CardTitle className="flex items-center gap-2 text-slate-900">
          <Target className="w-5 h-5 text-green-600" />
          Fitness Goals & Targets
        </CardTitle>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="grid md:grid-cols-2 gap-6">
            <div className="space-y-2">
              <Label htmlFor="target_weight" className="text-slate-700 font-medium">
                Target Weight (kg)
              </Label>
              <Input
                id="target_weight"
                type="number"
                step="0.1"
                min="30"
                max="300"
                value={formData.target_weight}
                onChange={(e) => updateFormData('target_weight', parseFloat(e.target.value) || "")}
                className="border-slate-200 focus:border-blue-500"
                placeholder="70.0"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="target_body_fat" className="text-slate-700 font-medium">
                Target Body Fat (%)
              </Label>
              <Input
                id="target_body_fat"
                type="number"
                step="0.1"
                min="3"
                max="50"
                value={formData.target_body_fat}
                onChange={(e) => updateFormData('target_body_fat', parseFloat(e.target.value) || "")}
                className="border-slate-200 focus:border-blue-500"
                placeholder="12.0"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="weekly_workout_goal" className="text-slate-700 font-medium">
                Weekly Workout Goal
              </Label>
              <Input
                id="weekly_workout_goal"
                type="number"
                min="1"
                max="14"
                value={formData.weekly_workout_goal}
                onChange={(e) => updateFormData('weekly_workout_goal', parseInt(e.target.value) || "")}
                className="border-slate-200 focus:border-blue-500"
                placeholder="4"
              />
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="strength_goals" className="text-slate-700 font-medium">
              Strength Goals
            </Label>
            <Input
              id="strength_goals"
              value={formData.strength_goals}
              onChange={(e) => updateFormData('strength_goals', e.target.value)}
              className="border-slate-200 focus:border-blue-500"
              placeholder="e.g., Bench 100kg, Squat 150kg, Deadlift 180kg"
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="fitness_goals_notes" className="text-slate-700 font-medium">
              Additional Goals & Notes
            </Label>
            <Textarea
              id="fitness_goals_notes"
              value={formData.fitness_goals_notes}
              onChange={(e) => updateFormData('fitness_goals_notes', e.target.value)}
              className="border-slate-200 focus:border-blue-500 min-h-[100px]"
              placeholder="Describe your long-term fitness goals, motivation, or any specific objectives..."
            />
          </div>

          <div className="flex justify-end pt-4">
            <Button 
              type="submit" 
              disabled={isSaving}
              className="fitness-gradient px-6 gap-2"
            >
              <Save className="w-4 h-4" />
              {isSaving ? "Saving..." : "Save Goals"}
            </Button>
          </div>
        </form>
      </CardContent>
    </Card>
  );
}